# -*- coding: utf-8 -*-
"""22301178_MdTaosif_CSE422_02_Assignment01_Summer2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTeYmN7gfP0MEzeGG-l_0lkx2OokyOXW
"""

input_file=open("//content/22301178_MdTaosif_CSE422_02_Assignment01_Summer2024_OutputFile.txt","r")
heuristic={}
graph={}
for i in input_file:
    temp= i.split(" ")
    heuristic[temp[0]]= int(temp[1])
    graph[temp[0]]=[]
    for j in range(2,len(temp)-1,2):
        city=temp[j]
        distance=temp[j+1]
        graph[temp[0]].append((city,int(distance)))
start= input("Start: ")
end= input("end: ")

import heapq
def printpath(parent,start,end,distance):
    pathh=[]
    pathh.append(end)
    temp=end
    while temp is not None:
        pathh.append(parent[temp])
        temp=parent[temp]
    pathh.reverse()
    if pathh is None:
        with open("/content/22301178_MdTaosif_CSE422_02_Assignment01_Summer2024_OutputFile.txt", 'w') as f:
            f.write("NO PATH FOUND\n")
    else:

        with open("/content/22301178_MdTaosif_CSE422_02_Assignment01_Summer2024_OutputFile.txt", 'w') as f:
            f.write(f"Path: {' -> '.join(pathh[1:])}\n")
            f.write(f"Total distance: {distance[end]} km\n")

def ASterSearch(start,end):

    parent={start:None}
    distance={start: 0}
    queue= []
    heapq.heappush(queue,(heuristic[start],start))
    while queue:
        temp=heapq.heappop(queue)
        for i in graph[temp[1]]:
            tempd=distance[temp[1]]+ i[1]
            if i[0] not in distance or tempd<distance[i[0]]:
                distance[i[0]]=tempd
                astarcost=distance[i[0]]+ heuristic[i[0]]
                heapq.heappush(queue,(astarcost,i[0]))
                parent[i[0]]=temp[1]
    printpath(parent,start,end,distance)
ASterSearch(start,end)



